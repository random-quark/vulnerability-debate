import React, { useState, useEffect } from "react";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer
} from "recharts";
import { useBiometricData } from "./useBiometricData";
import { format } from "date-fns";

import Modal from "react-modal";

const MEASURE_TIME = 5000;
const TALK_TIME = 5 * 60 * 1000;

const questionData = [
  "Given the choice of anyone in the world, whom would you want as a dinner guest?",
  "Would you like to be famous? In what way?",
  "Before making a telephone call, do you ever rehearse what you are going to say? Why?",
  "What would constitute a “perfect” day for you?",
  "When did you last sing to yourself? To someone else?",
  "If you were able to live to the age of 90 and retain either the mind or body of a 30-year-old for the last 60 years of your life, which would you want?",
  "Do you have a secret hunch about how you will die?",
  "Name three things you and your partner appear to have in common.",
  "For what in your life do you feel most grateful?",
  "If you could change anything about the way you were raised, what would it be?",
  "If you could wake up tomorrow having gained any one quality or ability, what would it be?",
  "If a crystal ball could tell you the truth about yourself, your life, the future or anything else, what would you want to know?",
  "Is there something that you’ve dreamed of doing for a long time? Why haven’t you done it?",
  "What is the greatest accomplishment of your life?",
  "What do you value most in a friendship?",
  "What is your most treasured memory?",
  "What is your most terrible memory?",
  "If you knew that in one year you would die suddenly, would you change anything about the way you are now living? Why?",
  "What does friendship mean to you?",
  "What roles do love and affection play in your life?",
  "Alternate sharing something you consider a positive characteristic of your partner. Share a total of five items.",
  "How close and warm is your family? Do you feel your childhood was happier than most other people’s?",
  "How do you feel about your relationship with your mother?",
  "Make three true “we” statements each. For instance, “We are both in this room feeling ... “",
  "Complete this sentence: “I wish I had someone with whom I could share ... “",
  "If you were going to become a close friend with your partner, please share what would be important for him or her to know.",
  "Tell your partner what you like about them; be very honest this time, saying things that you might not say to someone you’ve just met.",
  "Share with your partner an embarrassing moment in your life.",
  "When did you last cry in front of another person? By yourself?",
  "Tell your partner something that you like about them already.",
  "What, if anything, is too serious to be joked about?",
  "If you were to die this evening with no opportunity to communicate with anyone, what would you most regret not having told someone? Why haven’t you told them yet?",
  "Your house, containing everything you own, catches fire. After saving your loved ones and pets, you have time to safely make a final dash to save any one item. What would it be? Why?",
  "Of all the people in your family, whose death would you find most disturbing? Why?",
  "Share a personal problem and ask your partner’s advice on how he or she might handle it. Also, ask your partner to reflect back to you how you seem to be feeling about the problem you have chosen."
];
const randomisedQuestions = questionData.sort(() => Math.random() - 0.5);

const Questions = ({ position, nextQuestion }) => (
  <div>
    <h1>{randomisedQuestions[position]}</h1>
    <button onClick={nextQuestion}>Next question</button>
  </div>
);

const levels = ["Judge", "Tipsy", "Drunk", "Soused", "Taxi please", "A&E"];

const Drunkness = ({ data }) => {
  // map data to scale based on real world data

  const divs = new Array(6)
    .fill(null)
    .map((_, i) =>
      data > i ? (
        <div className="active" key={i}></div>
      ) : (
        <div key={i}>{levels[i]}</div>
      )
    )
    .reverse();

  return <div className="drunk-chart">{divs}</div>;
};

const Graph = ({ data, height }) => {
  const formattedData = data.map(datapoint => ({
    pv: datapoint
  }));

  return (
    <ResponsiveContainer>
      <LineChart
        data={formattedData}
        margin={{
          top: 5,
          right: 30,
          left: 20,
          bottom: 5
        }}
      >
        <CartesianGrid strokeDasharray="3 3" />
        <XAxis dataKey="name" />
        <YAxis type="number" domain={[0, height]} />
        <Line
          type="monotone"
          dataKey="pv"
          stroke="#8884d8"
          activeDot={{ r: 8 }}
        />
      </LineChart>
    </ResponsiveContainer>
  );
};

function Countdown({ startingSeconds }) {
  const [secondsToGo, setSeconds] = useState(startingSeconds);

  useEffect(() => {
    // exit early when we reach 0
    if (!secondsToGo) return;

    // save intervalId to clear the interval when the
    // component re-renders
    const intervalId = setInterval(() => {
      setSeconds(secondsToGo - 1000);
    }, 1000);

    // clear interval on re-render to avoid memory leaks
    return () => clearInterval(intervalId);
    // add secondsToGo as a dependency to re-rerun the effect
    // when we update it
  }, [secondsToGo]);

  console.log(secondsToGo);

  return <div className="countdown">{format(secondsToGo, "mm:ss")}</div>;
}

function Questioner() {
  const [questionPosition, setQuestionPosition] = useState(0);
  const {
    alcoholData,
    gsrData,
    startAlcohol,
    stopAlcohol
  } = useBiometricData();
  const [modalOpen, setModalOpen] = useState(true);
  const [measuringDrunkness, setMeasuringDrunkness] = useState(false);

  const dataPanel = (
    <>
      <h3>Ask your partner this question and see how they respond</h3>
      <Questions
        position={questionPosition}
        nextQuestion={() => setQuestionPosition(questionPosition + 1)}
      ></Questions>
      {/* <div>
    <h2>Heartbeat</h2>
    <Graph data={heartbeatData} height={200}></Graph>
  </div> */}
      <div>
        <Countdown startingSeconds={TALK_TIME}></Countdown>
        <h2>Your partners anxiety level</h2>{" "}
        <Graph data={gsrData} height={1000}></Graph>
      </div>
    </>
  );

  const measurePanel = (
    <>
      <h2>Breathe on sensor now</h2>
      <p>Ask your partner to breathe gently on the orange circle</p>
      <Countdown startingSeconds={MEASURE_TIME}></Countdown>
    </>
  );

  const start = () => {
    setModalOpen(false);
    setMeasuringDrunkness(true);
    startAlcohol();
    setTimeout(() => {
      setMeasuringDrunkness(false);
      stopAlcohol();
    }, MEASURE_TIME);
  };

  return (
    <>
      <Modal
        isOpen={modalOpen}
        // onAfterOpen={this.afterOpenModal}
        onRequestClose={() => setModalOpen(false)}
        contentLabel="Example Modal"
      >
        <h2>Instructions</h2>
        <ol>
          <li>You will have 5 minutes to have a conversation</li>
          <li>Put the two black tubes around your index and ring fingers</li>
          <li>
            When you press start your partner's drunkness will be measured. The
            orange circle is an alcohol sensor - tell them to breathe gently
            from an inch away until it says to stop
          </li>
          <li>
            Take turns to ask each other the presented question. Observe how
            your partners state changes
          </li>
        </ol>
        <button onClick={start}>START</button>
      </Modal>

      <div className="container">
        <div className="leftPanel">
          {measuringDrunkness ? measurePanel : dataPanel}
        </div>

        <div className="rightPanel">
          <h2>Partner's drunkness</h2>
          <Drunkness data={alcoholData}></Drunkness>
        </div>
      </div>
    </>
  );
}

export default Questioner;
